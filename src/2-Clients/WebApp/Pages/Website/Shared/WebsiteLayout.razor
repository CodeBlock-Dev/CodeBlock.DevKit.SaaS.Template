@using CodeBlock.DevKit.AIChatBot.UI.Models
@using CodeBlock.DevKit.Contracts.Services
@inject LocalizationSettings LocalizationSettings
@inherits LayoutComponentBase
@inject ApplicationSettings ApplicationSettings
@inject ISettingAccessorService SettingAccessorService

<HeadContent>
    <link href="css/cb.website.spa.@(LocalizationSettings.GetCurrentLanguageDirection().ToLower()).min.css" rel="stylesheet" />
</HeadContent>

<SplashScreen BrandName="@ApplicationSettings.Localized.Name" BackgroundCssClass="simple-layout-dark-bg" ProgressBarCssClass="simple-layout-title-color" OnStarted="HandleSplashStarted" />

@if (SplashScreenStarted)
{
    <div class="website-wrapper">
        <BlazoredToasts Position="ToastPosition.BottomCenter"
                        Timeout="5"
                        IconType="IconType.Material"
                        ErrorIcon=""
                        InfoIcon=""
                        SuccessIcon=""
                        WarningIcon=""
                        ShowProgressBar="true" />

        <NavMenu />

        <main>
            @Body
        </main>

        <Footer />

        @if (SettingAccessorService.Settings.AIChatBot.ShowChatBotWidgetOnWebsite)
        {
            <div class="chat-widget">
                <ChatBotWidget Theme="ChatBotWidgetTheme.Dark" />
            </div>
        }
    </div>

}

@code {
    /// <summary>
    /// Controls whether the splash screen has finished and the main content should be displayed.
    /// This demonstrates how to implement a loading state for better user experience.
    /// </summary>
    bool SplashScreenStarted = false;

    /// <summary>
    /// Event handler called when the splash screen animation completes.
    /// Sets the flag to show the main website content and hide the splash screen.
    /// This demonstrates how to handle component lifecycle events in Blazor.
    /// </summary>
    private void HandleSplashStarted()
    {
        SplashScreenStarted = true;
    }
}