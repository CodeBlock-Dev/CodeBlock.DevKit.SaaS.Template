@using CanBeYours.AdminPanel.Helpers
@using CanBeYours.Application.Dtos.DemoThings
@using CanBeYours.Core.Domain.DemoThings
@using CodeBlock.DevKit.Contracts.Helpers

<EditForm Model="Input" OnValidSubmit="HandleUpdateDemoThing">
    <DataAnnotationsValidator />

    <div class="detail-item-enhanced">
        <div class="detail-icon">
            <i class="bi bi-person-circle"></i>
        </div>
        <div class="detail-content">
            <label class="detail-label">@SharedLocalizer[SharedResource.Email]</label>
            <div class="detail-value">
                <a class="text-decoration-none text-primary" href="/user/details/@DemoThingUserId">@DemoThingUserEmail</a>
            </div>
        </div>
    </div>

    <div class="form-group p-2">
        <label class="f-sm text-secondary">
            @SharedLocalizer[SharedResource.DemoThing_Name]:
        </label>
        <InputText @bind-Value="Input.Name" class="form-control f-sm"></InputText>
        <ValidationMessage For="()=>Input.Name" class="text-danger f-sm"></ValidationMessage>
    </div>

    <div class="form-group p-2">
        <label class="f-sm text-secondary">
            @SharedLocalizer[SharedResource.DemoThing_Type]:
        </label>
        <InputSelect @bind-Value="Input.Type" class="form-control f-sm">
            @foreach (var type in Enum.GetValues<DemoThingType>())
            {
                <option value="@type">@type.GetEnumDisplayName()</option>
            }
        </InputSelect>
        <ValidationMessage For="() => Input.Type" class="text-danger f-sm"></ValidationMessage>
    </div>

    <div class="form-group p-2">
        <label class="f-sm text-secondary">
            @SharedLocalizer[SharedResource.DemoThing_Description]:
        </label>
        <InputTextArea @bind-Value="Input.Description" class="form-control f-sm" rows="3"></InputTextArea>
        <ValidationMessage For="()=>Input.Description" class="text-danger f-sm"></ValidationMessage>
    </div>

    <div class="form-group p-2">
        <button type="submit" class="btn f-sm btn-success me-2">
            @CoreLocalizer[CoreResource.Update]
        </button>
        @if (CurrentUser.HasPermission(Permissions.Tracking.CHANGES))
        {
            <a href="/tracking/changes/@DemoThingId" class="btn btn-outline-primary">
                <i class="bi bi-clock-history me-2"></i>@CoreLocalizer[CoreResource.Changes_History]
            </a>
        }

    </div>
</EditForm>

@code {
    [Parameter]
    public string DemoThingId { get; set; }

    private UpdateDemoThingDto Input = new();
    private string DemoThingUserId;
    private string DemoThingUserEmail;

    [CascadingParameter]
    protected BlazoredModalInstance ModalInstance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetDemoThing();
    }

    protected virtual async Task GetDemoThing()
    {
        var result = await DemoThingService.GetDemoThing(DemoThingId);
        if (!result.IsSuccess)
        {
            result.ShowErrorToast(ToastService);
            return;
        }

        DemoThingUserId = result.Value.UserId;
        DemoThingUserEmail = result.Value.UserEmail;

        Input = new UpdateDemoThingDto
        {
            Name = result.Value.Name,
            Type = result.Value.Type,
            Description = result.Value.Description,
        };
    }

    protected virtual async Task HandleUpdateDemoThing()
    {
        var result = await DemoThingService.UpdateDemoThing(DemoThingId, Input);
        result.ShowToast(ToastService).PublishMessage(MessageService, Constants.DEMO_THING_UPDATED).CloseModal(ModalInstance);
    }
} 